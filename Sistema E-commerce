import mysql.connector #importando a biblioteca

class Produto: #Definindo a classe Produto
    def __init__(self, nome, preco, descricao):#criando um metodo e ta se refirindo a ele mesmo e passando como parâmetros os atributos que podem ser acessados
        self.nome = nome # criando uma variavel dentro do proprio metodo e esta recebendo como atributo o parâmentro
        self.preco = preco # criando uma variavel dentro do proprio metodo e esta recebendo como atributo o parâmentro
        self.descricao = descricao # criando uma variavel dentro do proprio metodo e esta recebendo como atributo o parâmentro

class Cliente: #Definindo a classe Cliente
    def __init__(self, nome, email, contato): #criando um metodo e ta se refirindo a ele mesmo e passando como parâmetros os atributos que podem ser acessados
        self.nome = nome # criando uma variavel dentro do proprio metodo e esta recebendo como atributo o parâmentro
        self.email = email # criando uma variavel dentro do proprio metodo e esta recebendo como atributo o parâmentro
        self.contato = contato # criando uma variavel dentro do proprio metodo e esta recebendo como atributo o parâmentro

class Pedidos: #Definindo a classe Pedidos
    def __init__(self, id_cliente, id_produto):#criando um metodo e ta se refirindo a ele mesmo e passando como parâmetros os atributos que podem ser acessados
        self.id_cliente = id_cliente # criando uma variavel dentro do proprio metodo e esta recebendo como atributo o parâmentro
        self.id_produto = id_produto # criando uma variavel dentro do proprio metodo e esta recebendo como atributo o parâmentro
        
class SistemaEcommerce: #Definindo a classe SisteEcommerce para gerenciar o sistema
    def __init__(self):
        # Estabelece a conexão com o banco de dados MySQL
        self.conexao = mysql.connector.connect(
            host='localhost',
            user='root',
            password='he182555@',
            database='e_commerce'
        )
        # Cria um cursor para executar comandos SQL no banco de dados
        self.cursor = self.conexao.cursor()

    def adicionar_produto(self, produto):  # Método para adicionar um novo produto ao banco de dados
        sql = 'INSERT INTO produtos (nome, preco, descricao) VALUES (%s, %s, %s)'  # Prepara o comando SQL para inserir um novo produto na tabela 'produto'
        val = (produto.nome, produto.preco, produto.descricao)
        self.cursor.execute(sql, val)  # Executa o comando SQL
        self.conexao.commit() # Confirma novamente a transação no banco de dados
        print('Produto adicionado com sucesso!') 

    def listar_produtos(self):
        self.cursor.execute('SELECT nome, preco, descricao FROM produtos')
        produtos = self.cursor.fetchall()
        print('\n=== Listagem de Produtos ===')
        for produto in produtos:
            print(f'Nome: {produto[0]}, Preço: {produto[1]}, Descrição: {produto[2]}')

    def adicionar_cliente(self, cliente):
        sql = 'INSERT INTO cliente (nome, email, contato) VALUES (%s, %s, %s)' # Prepara o comando SQL para inserir um novo cliente na tabela 'cliente'
        val = (cliente.nome, cliente.email, cliente.contato)
        self.cursor.execute(sql, val) # Executa o comando SQL
        self.conexao.commit() # Confirma a transação no banco de dados
        print('Cliente adicionado com sucesso')  

    def adicionar_pedidos(self, id_cliente, id_produto): # Método para adicionar um novo pedido ao banco de dados
        # Primeiro, verificar se o produto existe pelo seu ID
        sql_verifica_produtos = 'SELECT * FROM produtos WHERE id = %s'
        self.cursor.execute(sql_verifica_produtos, (id_produto,))
        produto = self.cursor.fetchone() #obtem a consulta no banco de dados

        if not produto:
            print(f'Produto com ID {id_produto} não encontrado.') #se o produto nao exixte pelo id,essa mensagem  sera imprimida
            return

        # Verificar se o cliente existe pelo seu ID
        sql_verifica_cliente = 'SELECT * FROM cliente WHERE id_cliente = %s'
        self.cursor.execute(sql_verifica_cliente, (id_cliente,))
        cliente = self.cursor.fetchone() #obtem a consulta no banco de dados


        if not cliente:
            print(f'Cliente com ID {id_cliente} não encontrado.') #se o cliente nao estiver cadrastado, essa mensagem sera imprimida
            return
        
        # Se o produto e o cliente existem, adicionar o pedido
        sql = 'INSERT INTO pedidos (id_cliente, id_produto) VALUES (%s, %s)'
        val = (id_cliente, id_produto)
        self.cursor.execute(sql, val)
        self.conexao.commit()
        print('Pedido adicionado com sucesso.')

    def listar_pedidos(self):
    # Consulta SQL para listar todos os pedidos com detalhes de cliente e produto
    
        sql = 'SELECT pedidos.id, cliente.nome AS nome_cliente, produtos.nome AS nome_produto, produtos.preco \
           FROM pedidos \
           INNER JOIN cliente ON pedidos.id_cliente = cliente.id_cliente \
           INNER JOIN produtos ON pedidos.id_produto = produtos.id'
        #Seleciona o nome do cliente da tabela cliente, renomeando-o como nome_cliente
        #Seleciona o nome do produto da tabela produtos, renomeando-o como nome_produto.
        #Seleciona o preço do produto da tabela produtos.
        #FROM indinca que esta buscando as informações da tabela pedidos.
        # INNER JOIN cliente realiza uma junção interna entre a tabela pedidos e a tabela cliente usando a condição pedidos.id_cliente = cliente.id_cliente. 
        # INNER JOIN pedidos realiza outra junção interna entre a tabela pedidos e a tabela produtos usando a condição pedidos.id_produto = produtos.id. Isso garante que os pedidos estejam vinculados aos produtos corretos.
        self.cursor.execute(sql) #Execultando o comando em sql
        pedidos = self.cursor.fetchall() #está fazendo uma consulta buscando as informaçoes no banco de dados
        print('\n=== Listagem de Pedidos ===') #imprindo a lista de pedidos
        for pedido in pedidos:
         print(f'ID: {pedido[0]}, Cliente: {pedido[1]}, Produto: {pedido[2]}, Preço: {pedido[3]}')
        print('Listagem de pedidos concluída.')
 
    def fechar_conexao(self): # Metodo criado para fechar a conexão com op bando de dados.
        self.cursor.close()
        self.conexao.close()

    def menu_principal(self): # # Método principal que exibe o menu do sistema e permite a interação com o usuário, ai a opção que ele escolher vai ser exibida para ele.
        while True:
            print('\n=== Menu Principal ===')
            print('1. Adicionar Produto')
            print('2. Listar Produtos')
            print('3. Adicionar Cliente')
            print('4. Adicionar Pedido')
            print('5. Listar Pedidos')
            print('6. Sair')
   
            opcao = input('Escolha uma opção: ')

            if opcao == '1':
                nome = input('Nome do produto: ')
                preco = float(input('Preço do produto: '))
                descricao = input('Descrição do produto: ')
                novo_produto = Produto(nome, preco, descricao)
                self.adicionar_produto(novo_produto)

            elif opcao == '2':
                self.listar_produtos()

            elif opcao == '3':
                nome = input('Nome do cliente: ')
                email = input('Email do cliente: ')
                contato = input('Contato do cliente: ')
                novo_cliente = Cliente(nome, email, contato)
                self.adicionar_cliente(novo_cliente)

            elif opcao == '4':
                id_cliente = int(input('ID do cliente: '))
                id_produto = int(input('ID do produto: '))
                self.adicionar_pedidos(id_cliente, id_produto)

            elif opcao == '5':
                self.listar_pedidos()

            elif opcao == '6':
                print('Saindo do sistema...')
                break
             
            else:
                print('Opção inválida. Tente novamente.')

if __name__ == '__main__':
    sistema = SistemaEcommerce() #criando uma isntância da classe 'SistemaEcommerce' 
    sistema.menu_principal() #chama o metodo menu_principal para interagir com o usuario
    sistema.fechar_conexao() #Quando o usuario sair do sistema, chama o metodo fechar_cursor para fehar conexão com o banco de dados
